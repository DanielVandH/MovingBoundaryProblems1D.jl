var documenterSearchIndex = {"docs":
[{"location":"examples/","page":"Examples","title":"Examples","text":"CurrentModule = MovingBoundaryProblems1D","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This section gives some examples for how the package can be used. ","category":"page"},{"location":"examples/#Example-I:-Heat-equation","page":"Examples","title":"Example I: Heat equation","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"We start with a simple problem that has an exact solution, as discussed in e.g. this paper. The problem is a heat equation with a moving boundary (or a one-phase classical Stefan problem):","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"beginalign*\nbeginarrayrcll\ndfracpartial upartial t  =  dfracpartial^2upartial x^2  0  x  L(t) 9pt\ndfracpartial upartial t  =  -exp(t)  x = 0 t  0 9pt\nu  =  0  x = L(t)t0 9pt\ndfracmathrm dLmathrm dt  =  -dfracpartial upartial x  x = L(t)t0 9pt \nL(0)  =  0 9pt\nu(x 0)  =  0  0 leq x leq L(0) = 0\nendarray\nendalign*","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The exact solution is u(x t) = exp(t - x) - 1, L(t) = t for 0 leq x leq L(t) and 0  t  1. Since we need to have L(0)  0, and the domain is just 0 at t = 0, we solve the problem starting at t = 01 rather than t = 0. We setup the problem as follows:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using MovingBoundaryProblems1D \n\n# Define the exact solutions for gettig the initial data\nexact_u = (x, t) -> exp(t - x) - 1\nexact_L = t -> t\n\n# Define the boundary conditions\nlhs = Neumann((u, t, p) -> -exp(t))\nrhs = Dirichlet(0.0)\nmoving_boundary = Robin(0.0, -1.0)\n\n# Setup the initial data and the PDE\ninitial_time = 0.1\nfinal_time = 0.5\ninitial_endpoint = exact_L(initial_time)\nmesh_points = LinRange(0, initial_endpoint, 500)\ninitial_condition = exact_u.(mesh_points, initial_time)\ndiffusion_function = (u, x, t, p) -> one(u)\n\n# Define the problem\nprob = MBProblem(mesh_points, lhs, rhs, moving_boundary;\n    diffusion_function,\n    initial_time,\n    final_time,\n    initial_endpoint,\n    initial_condition)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The problem is then solved with solve, as is done in DifferentialEquations.jl.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using OrdinaryDiffEq, LinearSolve\nsol = solve(prob, TRBDF2(linsolve=KLUFactorization()), saveat=0.1)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Now, for plotting the solution, we cannot simply use mesh_points since those are defined on 0 1. To obtain the scaled mesh points at each time, we use scaled_mesh_points:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> scaled_mesh = scaled_mesh_points(prob, sol)\n5-element Vector{Vector{Float64}}:\n [0.0, 0.0002004008016032064, 0.0004008016032064128, 0.0006012024048096193, 0.0008016032064128256, 0.001002004008016032, 0.0012024048096192386, 0.001402805611222445, 0.0016032064128256513, 0.001803607214428858  …  0.09819639278557114, 0.09839679358717435, 0.09859719438877756, 0.09879759519038077, 0.09899799599198397, 0.09919839679358718, 0.09939879759519038, 0.0995991983967936, 0.0997995991983968, 0.1]\n [0.0, 0.00040080095829667935, 0.0008016019165933587, 0.0012024028748900382, 0.0016032038331867174, 0.002004004791483397, 0.0024048057497800764, 0.002805606708076756, 0.003206407666373435, 0.003607208624670115  …  0.1963924695653729, 0.19679327052366957, 0.19719407148196627, 0.19759487244026294, 0.1979956733985596, 0.1983964743568563, 0.19879727531515298, 0.19919807627344965, 0.19959887723174635, 0.19999967819004302]\n [0.0, 0.0006012011247570208, 0.0012024022495140416, 0.0018036033742710623, 0.002404804499028083, 0.003006005623785104, 0.0036072067485421245, 0.004208407873299146, 0.004809608998056166, 0.005410810122813187  …  0.2945885511309402, 0.2951897522556972, 0.29579095338045425, 0.2963921545052112, 0.29699335562996826, 0.2975945567547253, 0.2981957578794823, 0.2987969590042393, 0.29939816012899634, 0.29999936125375337]\n [0.0, 0.0008016010620834612, 0.0016032021241669224, 0.0024048031862503837, 0.0032064042483338447, 0.004008005310417306, 0.004809606372500767, 0.005611207434584229, 0.0064128084966676895, 0.007214409558751151  …  0.392784520420896, 0.39358612148297945, 0.39438772254506294, 0.39518932360714637, 0.39599092466922986, 0.3967925257313133, 0.3975941267933968, 0.3983957278554802, 0.3991973289175637, 0.39999892997964714]\n [0.0, 0.001002000880061787, 0.002004001760123574, 0.0030060026401853607, 0.004008003520247148, 0.005010004400308935, 0.006012005280370721, 0.007014006160432509, 0.008016007040494296, 0.009018007920556083  …  0.4909804312302756, 0.4919824321103374, 0.4929844329903992, 0.493986433870461, 0.49498843475052273, 0.49599043563058454, 0.49699243651064634, 0.49799443739070814, 0.4989964382707699, 0.4999984391508317]","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Let us now make the plot. Notice that in the code we need to use u[begin:(end-1)] to get the values of the solution rather than simply u, since u[end] is where we store the value of L.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"fig = Figure(fontsize=35)\nax = Axis(fig[1, 1], xlabel=L\"x\", ylabel=L\"u(x, t)\", width=600, height=300)\ncolors = [:red, :blue, :black, :magenta, :darkgreen]\n[lines!(ax, x, u[begin:(end-1)], color=clr, linewidth=1.5) for (x, u, clr) in zip(scaled_mesh, sol.u, colors)]\n[lines!(ax, x, exact_u.(x, t), color=clr, linestyle=:dash, linewidth=3) for (x, t, clr) in zip(scaled_mesh, sol.t, colors)]\nresize_to_layout!(fig)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<figure>\n    <img src='../figures/heat_equation.png', alt'Solution to the heat equation problem'><br>\n</figure>","category":"page"},{"location":"examples/#Example-II:-One-phase-Stefan-problem-and-steady-states","page":"Examples","title":"Example II: One-phase Stefan problem and steady states","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"We now consider a second example. This problem is similar to the previous example, except we do not start with L(0) = L_0, we do not have an exact solution, and we will examine steady states. The problem is:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"beginarrayrcll\ndfracpartial upartial t  =  Ddfracpartial^2 upartial x^2  0  x  L(t) t 0 9pt\ndfracpartial upartial x  =  0  x = 0t09pt\nu  =  0  x = L(t)t09pt\ndfracmathrm dLmathrm dt  =  -kappadfracpartial upartial x  x = L(t)\nendarray","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"As discussed in e.g. Eq. 1.6. of this paper, u(x t) to 0 and L(t) to L_e as t to infty, where","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"L_e = L(0) + dfrackappaDint_0^L(0) u(x 0)mathrm dx","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Out of interest, let us demonstrate how this is derived. Let us write","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"beginalign*\nN(t) = int_0^L(t) u(x t)mathrm dx 9pt\ndfracmathrm dNmathrm dt = dfracmathrm dLmathrm dtunderbraceu(L(t) t)_0 + int_0^L(t) dfracpartial upartial tmathrm dx 9pt\n= int_0^L(t) Ddfracpartial^2 upartial x^2mathrm dx 9pt\n= Dleftdfracpartial u(L(t) t)partial x - dfracpartial u(0 t)partial xright 9pt\n= -dfracDkappadfracmathrm dLmathrm dt\nendalign*","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Now integrating, we obtain N(t) = -(Dkappa)L(t) + C for some constant C. To evaluate this constant C, we integrate the initial condition:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"beginalign*\nint_0^L(0) u(x 0)mathrm dx = -dfracDkappaL(t) + C9pt\nC = dfracDkappaL(0) + int_0^L(0) u(x 0)mathrm dx\nendalign*","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Thus,","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"N(t) = dfracDkappaleft(L(0) - L(t)right) + int_0^L(0) u(x 0)mathrm dx","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Now take t to infty and note that N(t) to 0, so that we get","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"beginalign*\n0 = dfracDkappaleft(L(0) - L_eright) + int_0^L(0) u(x 0)mathrm dx \n0 = L(0) - L_e + dfrackappaDint_0^L(0) u(x 0)mathrm dx \nL_e = L(0) + dfrackappaDint_0^L(0) u(x 0)mathrm dx\nendalign*","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We will explore L_e later. Let us start by now solving the problem. The initial condition we use is ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"u(x 0) = begincases alpha  x  beta  0  x geq betaendcases","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"where alpha = 12 and beta = 1. We start with L(0) = beta. With these values, and D = 01 and kappa = 01, we find","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"L_e = 1 + dfrac0101int_0^1 alpha mathrm dx","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"or L_e = 32. We can verify this estimate by solving the problem:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using MovingBoundaryProblems1D\n\nmesh_points = LinRange(0, 1, 500)\n\nD = 0.1\ndiffusion_function = (u, x, t, p) -> p\ndiffusion_parameters = D\nlhs = Neumann(0.0)\nrhs = Dirichlet(0.0)\nκ = 0.1\nmoving_boundary = Robin(0.0, -κ)\n\nα = 0.5\nβ = 1.0\nic = x -> x < β ? α : 0.0\ninitial_condition = ic.(mesh_points)\ninitial_endpoint = β\nfinal_time = 20.0\n\nprob = MBProblem(mesh_points, lhs, rhs, moving_boundary;\n    diffusion_function,\n    diffusion_parameters,\n    initial_condition,\n    initial_endpoint=initial_endpoint,\n    final_time)\n\nusing OrdinaryDiffEq, LinearSolve \nsol = solve(prob, TRBDF2(linsolve=KLUFactorization()), saveat=final_time / 250)\n\nusing CairoMakie \nlet x = (stack ∘ scaled_mesh_points)(prob, sol), t = repeat(sol.t, inner=length(mesh_points)), u = sol[begin:(end-1), :]\n    fig = Figure(fontsize=33)\n    ax = Axis(fig[1, 1], width=600, height=300, xlabel=L\"x\", ylabel=L\"t\")\n    tricontourf!(ax, vec(x), t, vec(u))\n    resize_to_layout!(fig)\nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<figure>\n    <img src='../figures/heat_stefan.png', alt'Solution to the Stefan problem'><br>\n</figure>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can indeed see that the solution is zero for large time, and the highest value of x is indeed around L_e = 32. ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We provide a method for computing the steady state of a moving boundary problem. By wrapping the prob in SteadyMBProblem, another solve will give us the steady state:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using SteadyStateDiffEq \nsprob = SteadyMBProblem(prob)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> ssol = solve(sprob, DynamicSS(TRBDF2()))\nu: 501-element Vector{Float64}:\n 3.8102357269537885e-8\n 3.8102170476792114e-8\n 3.8101610100268955e-8\n 3.810067614511076e-8\n 3.8099368619888047e-8\n 3.80976875365995e-8\n 3.8095632910671864e-8\n ⋮\n 6.020854039360681e-10\n 4.816570994416517e-10\n 3.61232957797933e-10\n 2.4081442647367477e-10\n 1.2040295600361738e-10\n 0.0\n 1.49942609487085","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Indeed, the first 500 components approximately constitute the zero vector, and the last component (where L is stored) is essentially L_e approx 32.","category":"page"},{"location":"examples/#Example-III:-Fisher-Stefan-model,-exploring-the-spreading-extinction-dichotomy","page":"Examples","title":"Example III: Fisher-Stefan model, exploring the spreading-extinction dichotomy","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This example considers the Fisher-Stefan model (see e.g. this paper). This model is given by (in non-dimensional form)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"beginarrayrcll\ndfracpartial upartial t  =  dfracpartial^2 upartial x^2 + u(1-u)  0  x  L(t)  t  09pt\ndfracpartial upartial x  =  0  x = 0t0 9pt\nu  =  0  x = L(t)t0 9pt\ndfracmathrm dLmathrm dt  =  -kappadfracpartial upartial x  x = L(t) t0 9pt\nu(x 0)  =  begincases alpha  x  beta  0  x geq beta endcases  0 leq x leq L(0) 9pt\nL(0) = beta\nendarray","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"A function that solves this for given (kappa alpha beta T), where T is the final time, and also returns the steady state is given below:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using MovingBoundaryProblems1D\nusing OrdinaryDiffEq, LinearSolve \nusing SteadyStateDiffEq \n\nfunction construct_problem(𝝟, α, β, T, n=500)\n    mesh_points = LinRange(0, 1, n)\n    diffusion_function = (u, x, t, p) -> one(u)\n    reaction_function = (u, x, t, p) -> u * (one(u) - u)\n    lhs = Neumann(0.0)\n    rhs = Dirichlet(0.0)\n    moving_boundary = Robin(0.0, -κ)\n    ic = x -> x < β ? α : 0.0\n    initial_condition = ic.(mesh_points)\n    prob = MBProblem(\n        mesh_points, lhs, rhs, moving_boundary;\n        diffusion_function,\n        reaction_function,\n        initial_condition,\n        initial_endpoint=β,\n        final_time=T\n    )\n    return prob, mesh_points\nend\nfunction solve_problem(κ, α, β, T, n=500)\n    prob, mesh_points = construct_problem(κ, α, β, T, n)\n    sol = solve(prob, TRBDF2(linsolve=KLUFactorization()), saveat=T / 250)\n    scaled_mesh = scaled_mesh_points(prob, sol)\n    u = sol[begin:(end-1), :]\n    L = sol[end, :]\n    t = sol.t\n\n    sprob = SteadyMBProblem(prob)\n    ssol = solve(sprob, DynamicSS(TRBDF2()))\n    su = ssol.u[begin:(end-1)]\n    sL = ssol.u[end]\n\n    return prob, stack(scaled_mesh), u, t, L, su, sL, mesh_points .* sL, maximum(L), sol\nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Using this function, let us look at the solutions for kappa=20 and kappa=045, taking alpha=12 and beta=1.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using CairoMakie\nfig = Figure(fontsize=33)\nidx_rng = (1, 50, 100, 150, 200, 250)\ncolors = (:red, :blue, :black, :magenta, :darkgreen, :orange)\nax1 = Axis(fig[1, 1], width = 600, height = 300, xlabel=L\"x\",ylabel=L\"u(x, t)\", title=L\"(a): $\\kappa = 20$\", titlealign=:left)\nax2 = Axis(fig[1, 2], width = 600, height = 300, xlabel=L\"x\",ylabel=L\"u(x, t)\", title=L\"(b): $\\kappa = 0.45$\", titlealign=:left)\nax3 = Axis(fig[2, 1], width = 600, height = 300, xlabel=L\"x\",ylabel=L\"t\", title=L\"(c): $\\kappa = 20$\", titlealign=:left)\nax4 = Axis(fig[2, 2], width = 600, height = 300, xlabel=L\"x\",ylabel=L\"t\", title=L\"(d): $\\kappa = 20$\", titlealign=:left)\n[lines!(ax1, x1[:, idx], u1[:, idx], color=clr, linewidth=1.5) for (idx, clr) in zip(idx_rng, colors)]\n[lines!(ax2, x2[:, idx], u2[:, idx], color=clr, linewidth=1.5) for (idx, clr) in zip(idx_rng, colors)]\ntricontourf!(ax3, vec(x1), repeat(t1, inner=size(x1, 1)), vec(u1), levels = 100)\ntricontourf!(ax4, vec(x2), repeat(t2, inner=size(x2, 1)), vec(u2), levels = 20)\nresize_to_layout!(fig)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<figure>\n    <img src='../figures/fisher_stefan_1.png', alt'Solution to the Fisher-Stefan problem'><br>\n</figure>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We see that with kappa=045 the population goes extinct, but for kappa = 20 the solution evolves to a travelling wave with some speed c. We can estimate the wave speed c for kappa=20 as follows:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using StatsBase\nfunction estimate_wave_speed(sol)\n    Ls = @views sol[end, (end ÷ 2) : end] # only take late time \n    ts = @views sol.t[(end ÷ 2) : end] \n    cs = diff(Ls) ./ diff(ts)\n    return mean(cs)\nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> c = estimate_wave_speed(msol1)\n1.1860676450332943","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"This estimate of c agrees with c approx 12 reported by El-Hachem et al. (2019).","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Let us now give a further study of the relationship between c and kappa. We start by reproducing Figure 5 in El-Hachem et al. (2019). ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"function compute_wave_speed(κ, α, β, T)\n    prob, x, u, t, L, su, sL, sx, mL, sol = solve_problem(κ, α, β, T, 2_000)\n    if sL > 200.0 # the steady state solution makes no sense in this case, so we have a travelling wave\n        c = estimate_wave_speed(sol)\n        return c\n    else\n        return NaN\n    end\nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Now we can reproduce the figure.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"κ = LinRange(0.1, 2.0, 50)\nc = compute_wave_speed.(κ, 0.5, 1.0, 5.0)\nfig = Figure(fontsize=33)\nax = Axis(fig[1, 1], xlabel=L\"\\kappa\", ylabel=L\"c\", width=600, height=300)\nlines!(ax, κ, c, linewidth=3, color=:red)\nresize_to_layout!(fig)\nxlims!(ax, 0, 2)\nylims!(ax, 0, 1/2)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<figure>\n    <img src='../figures/fisher_stefan_2.png', alt'c-k plot'><br>\n</figure>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We see that there is a cutoff value of kappa called kappa_c, such that the population goes extinct for kappa  kappa_c and evolves to a travelling wave for kappa  kappa_c. We can estimate this kappa_c:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> κc = κ[findfirst(!isnan, c)]\n0.48775510204081635","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"So, kappa_c approx 048, which agrees with the value in El-Hachem et al. (2019). ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We could go further and explore the crtiical length, verifying the results of Du and Lin (2010) and El-Hachem et al. (2019) to check that:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"If L(t)  pi2 - kappaint_0^L(t) u(x t)mathrm dx for at least one value of t  0, the solution evolves to a travelling wave.\nIf L(0)  pi2, the population goes extinct and L(0)  lim_t to infty L(t)  pi2.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We do not do this here, though.","category":"page"},{"location":"examples/#Example-IV:-Dirichlet-boundary-conditions-and-a-parabolic-initial-condition","page":"Examples","title":"Example IV: Dirichlet boundary conditions and a parabolic initial condition","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"We now consider","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"beginalign*\nbeginarrayrcll\ndfracpartial upartial t  =  dfracpartial^2upartial x^2 + u(1-u)  0  x  L(t)  t0 9pt\nu(0 t)  =  0  t  0 9pt\nu(L(t) t)  =  0  t  0 9pt\ndfracmathrm dL(t)mathrm dt  =  -dfrac12dfracpartial u(L(t) t)partial t  t  0 9pt\nu(x 0)  =  2x(1-x)  0 leq x leq L(0) 9pt \nL(0)  =  1\nendarray\nendalign*","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"This problem can be solved as follows:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"mesh_points = LinRange(0, 1, 1_000)\ndiffusion_function = (u, x, t, p) -> one(u)\nreaction_function = (u, x, t, p) -> u * (one(u) - u)\nlhs = Dirichlet(0.0)\nrhs = Dirichlet(0.0)\nmoving_boundary = Robin(0.0, -1/2)\nic = x -> 2x * (1 - x)\ninitial_condition = ic.(mesh_points)\ninitial_endpoint = 1.0\nfinal_time = 0.4\nprob = MBProblem(mesh_points, lhs, rhs, moving_boundary;\n    diffusion_function,\n    reaction_function,\n    initial_condition,\n    initial_endpoint,\n    final_time)\nsol = solve(prob, TRBDF2(linsolve=KLUFactorization()))\n\nlet x = (stack ∘ scaled_mesh_points)(prob, sol), t = repeat(sol.t, inner=length(mesh_points)), u = sol[begin:(end-1), :]\n    fig = Figure(fontsize=33)\n    ax = Axis(fig[1, 1], width=600, height=300, xlabel=L\"x\", ylabel=L\"t\")\n    tricontourf!(ax, vec(x), t, vec(u), levels=0.0:0.05:0.5, extendlow=:auto)\n    resize_to_layout!(fig)\nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<figure>\n    <img src='../figures/parabolic.png', alt'Solution to the parabolic problem'><br>\n</figure>","category":"page"},{"location":"examples/#Example-V:-Epithelial-dynamics","page":"Examples","title":"Example V: Epithelial dynamics","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"We now consider a free boundary model of epithelial dynamics, following Baker et al. (2019) - refer to this paper for more detail about this problem. ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The PDE we take is","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"beginalign*\nbeginarrayrcll\ndfracpartial qpartial t  =  dfracpartialpartial xleft(D(q)dfracpartial qpartial xright) + qGleft(dfrac1qright)  0  x  L(t)t09pt\ndfracpartial qpartial x  =  0  x = 0t09pt\ndfrac1etaFleft(dfrac1qright) + dfracD(q)2qdfracpartial qpartial x  =  0  x = L(t)t09pt \ndfracmathrm dLmathrm dt  =  -dfracD(q)qdfracpartial qpartial x  x = L(t)t0 9pt\nq(x 0)  =  q_0(x)  0 leq x leq L(0)\nendarray\nendalign*","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"For the parameters of this problem, we take (these parameters follow a similar example in Murphy et al. (2020)):","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Linear force law: F(q) = k(s-q) \nDiffusion function: D(q) = k(eta q^2);\nProliferation law: G(q) = beta;\nSpring constant: k = 10;\nResting spring length: s = 0;\nViscosity coefficient: eta = 1;\nIntrinsic proliferation rate: beta = 000577. (This value is chosen so that int_0^400 u(x 400)mathrm dx approx 400.)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"To define q_0(x), we take a Gaussian initial density with variance three centred at x = L_02, where L_0 = 10, and we then scale it such that N(0) = 40, where N(t) = int_0^L(t) q(x t)mathrm dx is the number of cells at the time t. To find this q_0(x), write","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"q_0(x) = dfracAsqrt2pi sigma^2expleft-dfrac12left(dfracx - L_02sigmaright)^2right","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"where sigma^2 = 3. Integrating this, we find that ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"int_0^L_0 q_0(x)mathrm dx = Atexterfleft(dfracL_04sigmasqrt2right)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"So, setting N(0) = Atexterf(L_0sqrt24sigma), we find","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"q_0(x) = dfracN(0)texterfleft(dfracL_04sigmasqrt2right)sqrt2pisigma^2expleft-dfracleft(2x - L_0right)^28sigma^2right","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The last thing to do before we define our problem is to rearrange the boundary condition at x = L(t) into the form partial qpartial x = a_2(q(L(t) t) t):","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"dfracpartial q(L(t) t)partial x = -dfrac2qeta D(q)Fleft(dfrac1qright)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Let's now construct and solve the problem.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using MovingBoundaryProblems1D, SpecialFunctions \n\n## Define the parameters \nk, s, η, β = 10.0, 1.0, 1.0, 0.00577\nF = (q, p) -> p.k * (p.s - q)\nD = (q, p) -> p.k / (p.η * q^2)\nG = (q, p) -> p.β\nL₀ = 10.0\nN₀ = 40.0\nσ = sqrt(3)\n\n## Define the initial condition \nmesh_points = LinRange(0, L₀, 1000)\nq₀ = x -> N₀ * exp(-(2x - L₀)^2 / (8σ^2)) / (erf(L₀ * sqrt(2) / (4σ)) * sqrt(2π * σ^2))\ninitial_condition = q₀.(mesh_points)\n\n## Define the PDE \ndiffusion_function = (q, x, t, p) -> p.D(q, p)\ndiffusion_parameters = (D=D, k=k, η=η)\nreaction_function = (q, x, t, p) -> q * p.G(inv(q), p)\nreaction_parameters = (G=G, β=β)\n\n## Define the boundary conditions \nlhs = Neumann(0.0)\nrhs_f = (q, t, p) -> -2q * p.F(inv(q), p) / (p.η * p.D(q, p))\nrhs_p = (F=F, η=η, D=D, s=s, k=k)\nrhs = Neumann(rhs_f, rhs_p)\nmoving_boundary_f = (q, t, p) -> (zero(q), -p.D(q, p) / q)\nmoving_boundary_p = (D=D, k=k, η=η)\nmoving_boundary = Robin(moving_boundary_f, moving_boundary_p)\n\n## Define the problem \nprob = MBProblem(mesh_points, lhs, rhs, moving_boundary;\n    diffusion_function,\n    diffusion_parameters,\n    reaction_function,\n    reaction_parameters,\n    initial_condition,\n    initial_endpoint=L₀,\n    final_time=400.0)\n\n## Solve the problem \nusing OrdinaryDiffEq, LinearSolve\nsol = solve(prob, TRBDF2(linsolve=KLUFactorization()))","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"To visualise the solution, we will also look at the cell number N(t). This cell number is computed using the following:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using DataInterpolations\nfunction integrate_solution(prob, sol)\n    mesh_points = scaled_mesh_points(prob, sol)\n    N = zeros(length(sol))\n    for i in eachindex(sol)\n        q = sol.u[i]\n        x = mesh_points[i]\n        interp = LinearInterpolation(q, x)\n        N[i] = DataInterpolations.integral(interp, x[begin], x[end])\n    end\n    return N\nend\nNt = integrate_solution(prob, sol)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We now plot.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using CairoMakie \n\nfig = Figure(fontsize=33)\ncolors = (:red, :blue, :black, :magenta, :darkgreen)\n\nax1 = Axis(fig[1, 1], xlabel=L\"x\", ylabel=L\"q(x, t)\",\n    title=L\"(a): $q(x, t)$\", titlealign=:left,\n    width=600, height=300)\nax2 = Axis(fig[1, 2], xlabel=L\"t\", ylabel=L\"N(t)\",\n    title=L\"(b): $N(t)$\", titlealign=:left,\n    width=600, height=300)\nax3 = Axis(fig[1, 3], xlabel=L\"t\", ylabel=L\"L(t)\",\n    title=L\"(c): $L(t)$\", titlealign=:left,\n    width=600, height=300)\n\nt = [0.0, 100.0, 200.0, 300.0, 400.0]\nqL = sol.(t)\nq = [@views qL[begin:(end-1)] for qL in qL]\nL = [qL[end] for qL in qL]\nξ_grid = prob.geometry.mesh_points\n[lines!(ax1, ξ_grid .* L[i], q[i], color=colors[i]) for i in eachindex(q)]\nlines!(ax2, sol.t, Nt, color=:black, linewidth=3)\nlines!(ax3, sol.t, @views(sol[end, :]), color=:black, linewidth=3)\nresize_to_layout!(fig)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<figure>\n    <img src='../figures/epithelial.png', alt'Solution to the epithelial problem'><br>\n</figure>","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"CurrentModule = MovingBoundaryProblems1D","category":"page"},{"location":"math/#Mathematical-Details","page":"Mathematical Details","title":"Mathematical Details","text":"","category":"section"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"In this section, we provide some of the mathematical details for discretising the PDEs we consider. Recall that the PDEs we consider take the form:","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"beginalign*\nbeginarrayrcll\ndfracpartial u(x t)partial t  =  dfracpartialpartial xleft(Dleft(u(x t) x tright)dfracpartial u(x t)partial xright) + Rleft(u(x t) x tright)  0  x  L(t) t0 9pt\ndfracpartial u(0 t)partial x  =  a_0left(u(0 t) tright)  x = 0t0 9pt\ndfracpartial u(L(t) t)partial x  =  a_1left(u(L(t) t)right)  x=L(t)t0 9pt\ndfracmathrm dLmathrm dt  =  a_2left(u(L(t) t) tright) + b_2left(u(L(t) t) tright)dfracpartial u(L(t) t)partial x  x = L(t)t0 9pt\nu(x 0)  =  u_0(x)  0 leq x leq L(0) 9pt\nL(0)  =  L_0\nendarray\nendalign*","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"It is assumed that L(t)  0 for t geq 0. (Note that, in this discussion, t geq 0, but the package allows for generic timespans.) If you need other types of problems, e.g. L(t) is negative somewhere, you might need to apply some transformations to the domain first.","category":"page"},{"location":"math/#Transforming-onto-a-Fixed-Domain","page":"Mathematical Details","title":"Transforming onto a Fixed Domain","text":"","category":"section"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"We apply the Landau transform (xi tau) mapsto (xL(t) t) to transform the moving boundary problem onto a fixed domain. Writing q(xi tau) = u(x t), the chain rule gives","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"beginalign*\ndfracpartial upartial t = dfracpartial qpartial xidfracpartial xipartial t + dfracpartial qpartialtaudfracmathrm dtaumathrm dt \n= -fracxL^2dfracmathrm dLmathrm dtdfracpartial qpartial xi + dfracpartial qpartial tau \ndfracpartial qpartialtau = dfracpartial upartial t + fracxiLdfracmathrm dLmathrm dtdfracpartial qpartial xi \n= dfracpartialpartial xleft(Ddfracpartial upartial xright) + R + fracxiLdfracmathrm dLmathrm dtdfracpartial qpartial xi \n= fracxiLdfracmathrm dLmathrm dtdfracpartial qpartial xi + frac1L^2dfracpartialpartial xileft(Ddfracpartial qpartial xiright)\nendalign*","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"Similarly, partial u(0 t)partial x = (1L)partial q(0 t)partialxi so partial q(0 t)partialxi = La_0 and partial q(1 t)partialxi = La_1. Lastly, mathrm dLmathrm dt = a_2 + (b_2L)partial q(1 t)partialxi. Thus, the problem to discretise is (replacing tau with t):","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"beginalign*\nbeginarrayrcll\ndfracpartial qpartial t  =  dfracxiLdfracmathrm dLmathrm dtdfracpartial qpartial xi + dfrac1L^2dfracpartialpartial xileft(Dleft(q xi L tright)dfracpartial qpartial xiright) + Rleft(q xi L tright)  0  xi  1 t0 9pt\ndfracpartial qpartial xi  =  La_0(q t)  xi = 0 t0 9pt\ndfracpartial qpartial xi  =  La_1(q t)  xi = 1 t0 9pt\ndfracmathrm dLmathrm dt  =  a_2 + dfracb_2Ldfracpartial qpartial xi  xi = 1 t0 9pt\nq(xi 0)  =  u_0left(xi L_0right)  0 leq xi leq 19pt \nL(0)  =  L_0\nendarray\nendalign*","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"Note that we could replace partial qpartial xi in the mathrm dLmathrm dt condition with La_1(q t), but in case we have a Dirichlet boundary condition for q(1 t) rather than a Neumann boundary condition, a finite difference would be needed, so we delay this point.","category":"page"},{"location":"math/#Interior-Discretisation","page":"Mathematical Details","title":"Interior Discretisation","text":"","category":"section"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"We now proceed by discretising the fixed boundary problem. We define some grid xi_1ldotsxi_n over 0 1, where 0 = xi_1  xi_2  cdots  xi_n = 1, and let","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"beginalign*\nw_i = begincases xi_1  i=1 6pt dfrac12left(xi_i-1 + xi_iright)  i=2ldotsn endcases 6pt\ne_i = begincases dfrac12left(xi_i + xi_i+1right)  i=1ldotsn-1 6pt xi_n  i = n endcases\nendalign*","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"Next, we define V_i = e_i - w_i, i = 1ldotsn, and h_i = xi_i+1 - xi_i, i=1ldotsn-1. Now integrate the PDE over a control volume w_i e_i:","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"beginalign*\nint_w_i^e_i dfracpartial qpartial tmathrmdxi = frac1Ldfracmathrm dLmathrm dtint_w_i^e_i xidfracpartial qpartial ximathrmdxi + int_w_i^e_i R(q xi L t)mathrmdxi \n+ frac1L^2leftDleft(q(e_i t) e_iL tright)dfracpartial q(e_i t)partial xi - Dleft(q(w_i t) w_iL tright)dfracpartial q(w_i t)partial xiright \nendalign*","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"This first integral can be handled using integration by parts,","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"beginalign*\nint_w_i^e_i xidfracpartial qpartial ximathrmdxi = leftxi qright_w_i^e_i - int_w_i^e_i qmathrmdxi \n= e_iq(e_i t) - w_iq(w_i t) - int_w_i^e_i qmathrmdxi\nendalign*","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"Now, we also let bar q_i = (1V_i)int_w_i^e_i qmathrm dxi and bar R_i = (1V_i)int_w_i^e_i Rmathrm dxi. With this, we obtain:","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"beginalign*\nV_idfracmathrm dbar q_imathrm dt = dfrac1Ldfracmathrm dLmathrm dtlefte_iq(e_i t) - w_iq(w_i t) - V_ibar q_iright +V_i bar R_i \n+ frac1L^2leftDleft(q(e_i t) e_iL tright)dfracpartial q(e_i t)partial xi - Dleft(q(w_i t) w_iL tright)dfracpartial q(w_i t)partial xiright \ndfracmathrm dbar q_imathrm dt = dfrac1V_iLdfracmathrm dLmathrm dtlefte_iq(e_i t) - w_iq(w_i t)right - dfrac1Ldfracmathrm dLmathrm dtbar q_i + bar R_i \n+ frac1V_iL^2leftDleft(q(e_i t) e_iL tright)dfracpartial q(e_i t)partial xi - Dleft(q(w_i t) w_iL tright)dfracpartial q(w_i t)partial xiright \nendalign*","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"To now proceed, we let q_i = q(xi_i t), D_i = D(q_i xi_i L t), and R_i = R(q_i xi_i L t). We then make the approximations:","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"beginalign*\nbeginarrayrcll\nbar q_i approx   q_i  i=1ldotsn 9pt\nbar R_i approx  R_i  i=1ldotsn9pt\nq(e_i t) approx dfrac12left(q_i + q_i+1right)  i=1ldotsn-19pt\nq(w_i t) approx  dfrac12left(q_i-1 + q_iright)  i=2ldotsn 9pt\nDleft(q(e_i t) e_iL tright) approx dfrac12left(D_i + D_i+1right) quad  i=1ldotsn-19pt\nDleft(q(w_i t) w_iL tright) approx dfrac12left(D_i-1 + D_iright)  i=2ldotsn9pt \ndfracpartial q(e_i t)partial xi approx dfracq_i+1 - q_ih_i  i=1ldotsn-1 9pt\ndfracpartial q(w_i t)partial xi approx dfracq_i - q_i-1h_i-1  i=2ldotsn\nendarray\nendalign*","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"With these approximations, our approximation of the PDE at the interior nodes becomes","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"beginalign*\ndfracmathrm dq_imathrm dt = frac1V_iLdfracmathrm dLmathrm dtlefte_ileft(dfracq_i+q_i+12right) - w_ileft(dfracq_i-1 + q_i2right)right - dfrac1Ldfracmathrm dLmathrm dtq_i + R_i \n+ frac1V_iL^2leftleft(dfracD_i + D_i+12right)left(dfracq_i+1 - q_ih_iright) - left(dfracD_i-1 + D_i2right)left(dfracq_i - q_i-1h_i-1right)right\nendalign*","category":"page"},{"location":"math/#Boundary-Discretisation","page":"Mathematical Details","title":"Boundary Discretisation","text":"","category":"section"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"Now we handle discretising the boundary conditions. The boundary condition at xi = 0 gives partial qpartial xi = La_0(q_1 t), so, also using w_1 = xi_1 = 0,","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"beginalign*\ndfracmathrm dq_1mathrm dt = dfrac1V_1Ldfracmathrm dLmathrm dte_1left(dfracq_1 + q_22right) - dfrac1Ldfracmathrm dLmathrm dtq_1 + R_1 \n+ frac1V_1L^2leftleft(dfracD_1 + D_22right)left(dfracq_2 - q_1h_1right) - D_1La_0(q_1 t)right\nendalign*","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"The boundary condition at xi = 1 gives partial qpartial xi = La_1(q_n t), so, also using e_n = xi_n = 1,","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"beginalign*\ndfracmathrm dq_nmathrm dt = dfrac1V_nLdfracmathrm dLmathrm dtleftq_n - w_nleft(dfracq_n-1 + q_n2right)right - dfrac1Ldfracmathrm dLmathrm dtq_n + R_n \n+ dfrac1V_nL^2leftD_nLa_1(q_n t) - left(dfracD_n-1 + D_n2right)left(dfracq_n - q_n-1h_n-1right)right\nendalign*","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"Now we handle mathrm dLmathrm dt. If we have a boundary condition partial qpartial xi = La_1(q_n t) for q(1 t), then we can write","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"beginalign*\ndfracmathrm dLmathrm dt = a_2(q_n t) + fracb_2(q_n t)LLa_1(q_n t) \n= a_2(q_n t) + a_1(q_n t)b_2(q_n t)\nendalign*","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"If instead we have a Dirichlet boundary condition on q(1 t), we use a three-point finite difference, writing (see e.g. this paper).","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"dfracpartial qpartial xi approx dfrach_n-1h_n-2left(h_n-2 + h_n-1right)q_n-2 - dfrach_n-2 + h_n-1h_n-2h_n-1q_n-1 + dfrach_n-2 + 2h_n-1h_n-2left(h_n-1 + h_n-2right)q_n","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"so that","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"beginalign*\ndfracmathrm dLmathrm dt  = a_2(q_n t) + dfracb_2(q_n t)Lleft(dfrach_n-1h_n-2left(h_n-2 + h_n-1right)q_n-2 - dfrach_n-2 + h_n-1h_n-2h_n-1q_n-1 + dfrach_n-2 + 2h_n-1h_n-2left(h_n-1 + h_n-2right)q_nright)\nendalign*","category":"page"},{"location":"math/#The-Complete-Discretisation","page":"Mathematical Details","title":"The Complete Discretisation","text":"","category":"section"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"Putting all these results together, the complete system of ODEs is","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"beginalign*\ndfracmathrm dq_imathrm dt = frac1V_iLdfracmathrm dLmathrm dtlefte_ileft(dfracq_i+q_i+12right) - w_ileft(dfracq_i-1 + q_i2right)right - dfrac1Ldfracmathrm dLmathrm dtq_i + R_i \n+ frac1V_iL^2leftleft(dfracD_i + D_i+12right)left(dfracq_i+1 - q_ih_iright) - left(dfracD_i-1 + D_i2right)left(dfracq_i - q_i-1h_i-1right)right  quadquad quad i=2ldotsn-1 9pt\ndfracmathrm dq_1mathrm dt = dfrac1V_1Ldfracmathrm dLmathrm dte_1left(dfracq_1 + q_22right) - dfrac1Ldfracmathrm dLmathrm dtq_1 + R_1 \n+ frac1V_1L^2leftleft(dfracD_1 + D_22right)left(dfracq_2 - q_1h_1right) - D_1La_0(q_1 t)right 9pt \ndfracmathrm dq_nmathrm dt = dfrac1V_nLdfracmathrm dLmathrm dtleftq_n - w_nleft(dfracq_n-1 + q_n2right)right - dfrac1Ldfracmathrm dLmathrm dtq_n + R_n \n+ dfrac1V_nL^2leftD_nLa_1(q_n t) - left(dfracD_n-1 + D_n2right)left(dfracq_n - q_n-1h_n-1right)right 9pt\ndfracmathrm dLmathrm dt = a_2(q_n t) + a_1(q_n t)b_2(q_n t)\nendalign*","category":"page"},{"location":"math/","page":"Mathematical Details","title":"Mathematical Details","text":"This system is solved, and then from q(xi_i t_j) we get values of u at (x_iL(t_j) t_j).","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = MovingBoundaryProblems1D","category":"page"},{"location":"#MovingBoundaryProblems1D","page":"Home","title":"MovingBoundaryProblems1D","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for MovingBoundaryProblems1D.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is a package for solving one-dimensional single phase moving boundary problems using the finite volume method. The problems that can be solved using this package take the form","category":"page"},{"location":"","page":"Home","title":"Home","text":"beginalign*\nbeginarrayrcll\ndfracpartial u(x t)partial t  =  dfracpartialpartial xleft(Dleft(u(x t) x tright)dfracpartial u(x t)partial xright) + Rleft(u(x t) x tright)  0  x  L(t) t0 9pt\ndfracpartial u(0 t)partial x  =  a_0left(u(0 t) tright)  x = 0t0 9pt\ndfracpartial u(L(t) t)partial x  =  a_1left(u(L(t) t)right)  x=L(t)t0 9pt\ndfracmathrm dLmathrm dt  =  a_2left(u(L(t) t) tright) + b_2left(u(L(t) t) tright)dfracpartial u(L(t) t)partial x  x = L(t)t0 9pt\nu(x 0)  =  u_0(x)  0 leq x leq L(0) 9pt\nL(0)  =  L_0\nendarray\nendalign*","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can also use Dirichlet boundary conditions rather than Neumann boundary conditions for u(0 t) and u(L(t) t). We also provide methods for computing steady states of the above problem. Examples of how to use the package are given in the sidebar.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [MovingBoundaryProblems1D]","category":"page"},{"location":"#MovingBoundaryProblems1D.BoundaryConditions","page":"Home","title":"MovingBoundaryProblems1D.BoundaryConditions","text":"BoundaryConditions{L<:Union{<:Dirichlet, <:Neumann},R<:Union{<:Dirichlet, <:Neumann},M<:Robin}\n\nThe boundary conditions for the MBProblem.\n\nFields\n\nlhs::L: The left-hand side boundary condition. Must be Dirichlet or Neumann.\nrhs::R: The right-hand side boundary condition. Must be Dirichlet or Neumann.\nmoving_boundary::M: The moving boundary condition. Must be Robin.\n\nSee also Dirichlet, Neumann, and Robin for the types of  boundary conditions you can construct.\n\n\n\n\n\n","category":"type"},{"location":"#MovingBoundaryProblems1D.Dirichlet","page":"Home","title":"MovingBoundaryProblems1D.Dirichlet","text":"Dirichlet{F,P} <: AbstractBoundaryCondition{F,P}\n\nA Dirichlet boundary condition with fields f and p (default p = nothing), with f being a function of the form f(u, p) and p being the parameters for f. \n\nA Dirichlet boundary condition takes the form\n\nu(a t)  f(u(a t) t p)\n\nwhere a is one of the endpoints. \n\nConstructors\n\nDirichlet(f::Function, p = nothing) -> Dirichlet(f, p)\nDirichlet(; f, p = nothing)         -> Dirichlet(f, p)\nDirichlet(v::Number)                -> Dirichlet((u, t, p) -> oftype(u, v), nothing)\n\n\n\n\n\n","category":"type"},{"location":"#MovingBoundaryProblems1D.MBGeometry","page":"Home","title":"MovingBoundaryProblems1D.MBGeometry","text":"MBGeometry{T}\n\nDefinition of the geometry for a moving boundary problem problem.\n\nFields\n\nmesh_points::T: The mesh points. Must be sorted and satisfy mesh_points[begin] = 0 and mesh_points[end] = 1 (if they do not satisfy this, they are scaled first).\nspacings::T: The spacings between the mesh points. \nvolumes::T: The volumes of the cells defined by the mesh points.\n\nConstructors\n\nTo construct the geometry, you can directly call the default constructor, \n\nMBGeometry(mesh_points, spacings, volumes)\n\nor you can call the convenience constructor,\n\nMBGeometry(mesh_points)\n\nwhich will compute the spacings and volumes for you.\n\nSee also MBProblem.\n\n\n\n\n\n","category":"type"},{"location":"#MovingBoundaryProblems1D.MBProblem","page":"Home","title":"MovingBoundaryProblems1D.MBProblem","text":"MBProblem{T,DF,DP,RF,RP,L,R,M,IC,IE,FT}\n\nDefinition of an MBProblem.\n\nFields\n\ngeometry::MBGeometry{T}: The geometry of the problem.\nboundary_conditions::BoundaryConditions{L, R, M}: The boundary conditions.\ndiffusion_function::DF: The diffusion function, of the form (u, x, t, p) -> Number, where p = diffusion_parameters.\ndiffusion_parameters::DP: The parameters for the diffusion function.\nreaction_function::RF: The reaction function, of the form (u, x, t, p) -> Number, where p = reaction_parameters.\nreaction_parameters::RP: The parameters for the reaction function.\ninitial_condition::IC: The initial condition, with initial_condition[i] corresponding to the value at geometry.mesh_points[i] and t = initial_time.\ninitial_endpoint::IE: The initial endpoint. This is the value of the moving boundary at t = initial_time.\ninitial_time::FT: The initial time.\nfinal_time::FT: The final time.\n\nConstructors\n\nYou can use the default constructor, but we also provide the constructor \n\nMBProblem(;\n    geometry, \n    boundary_conditions,\n    diffusion_function,\n    diffusion_parameters = nothing,\n    reaction_function = Returns(0.0),\n    reaction_parameters = nothing,\n    initial_condition,\n    initial_endpoint,\n    initial_time = 0.0,\n    final_time)\n\nwhich provides some default values. Moreover, instead of providing geometry and boundary_conditions, you can use \n\nMBProblem(mesh_points, lhs, rhs, moving_boundary; kwargs...)\n\nwhich will construct geometry = MBGeometry(mesh_points) and boundary_conditions = BoundaryConditions(lhs, rhs, moving_boundary).  The kwargs... are as above, except without geometry and boundary_conditions of course.\n\nTo solve the MBProblem, just use solve as you would in DifferentialEquations.jl. For example, \n\nsol = solve(prob, Tsit5(), saveat=0.1)\n\nThe solution in this case will be such that sol.u[i] has the values of u in sol.u[i][begin:(end-1)], and the position  of the moving boundary at sol.t[i] in sol.u[i][end].\n\n\n\n\n\n","category":"type"},{"location":"#MovingBoundaryProblems1D.Neumann","page":"Home","title":"MovingBoundaryProblems1D.Neumann","text":"Neumann{F,P} <: AbstractBoundaryCondition{F,P}\n\nA Neumann boundary condition with fields f and p (default p = nothing), with f being a function of the form f(u, t, p) and p being the parameters for f.\n\nA Neumann boundary condition takes the form\n\ndfracpartial upartial x(a t) = f(u(a t) t p)\n\nwhere a is one of the endpoints. \n\nConstructors\n\nNeumann(f::Function, p = nothing) -> Neumann(f, p)\nNeumann(; f, p = nothing)         -> Neumann(f, p)\nNeumann(v::Number)                -> Neumann((u, t, p) -> oftype(u, v), nothing)\n\n\n\n\n\n","category":"type"},{"location":"#MovingBoundaryProblems1D.Robin","page":"Home","title":"MovingBoundaryProblems1D.Robin","text":"Robin{F,P} <: AbstractBoundaryCondition{F,P}\n\nA Robin boundary condition with fields f and p (default p = nothing), with f being a function of the form f(u, t, p) that returns a Tuple (a₂, b₂)  and p being the parameters for f.\n\nA Robin boundary condition takes the form\n\ndLdt = a₂(u t p) + b₂(u t p)ux\n\nwhere f(u, t, p) = (a₂(u, t, p), b₂(u, t, p)). \n\nConstructors\n\nRobin(f::Function, p = nothing) -> Robin(f, p)\nRobin(; f, p = nothing)         -> Robin(f, p)\nRobin(a::Number, b::Number)     -> Robin((u, t, p) -> (oftype(u, a), oftype(u, b)))\nRobin(a₂::Function, b₂::Function, p = nothing) -> Robin((u, t, p) -> (a₂(u, t, p), b₂(u, t, p)), p)\n\n\n\n\n\n","category":"type"},{"location":"#MovingBoundaryProblems1D.SteadyMBProblem","page":"Home","title":"MovingBoundaryProblems1D.SteadyMBProblem","text":"SteadyMBProblem{M}\n\nDefines a steady-state problem for a moving boundary problem. Only has a  single field, prob::MBProblem.\n\n\n\n\n\n","category":"type"},{"location":"#MovingBoundaryProblems1D.scaled_mesh_points-Tuple{MBProblem, Any}","page":"Home","title":"MovingBoundaryProblems1D.scaled_mesh_points","text":"scaled_mesh_points(prob::MBProblem, sol)\n\nGiven the solution sol to an MBProblem prob, returns the scaled grid points at each time.\n\n\n\n\n\n","category":"method"}]
}
